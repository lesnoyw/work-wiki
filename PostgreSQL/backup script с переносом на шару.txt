#!/bin/sh

exec 3>&1 4>&2
trap 'exec 2>&4 1>&3' 0 1 2 3
exec 1>>/var/log/backup-postgres.log 2>&1

PATH=/sbin:/bin:/usr/sbin:/usr/bin;export PATH

export PGUSER=pg_role
export PGPASSWORD='pg_role_password'

DATE=`date +"%d%m%Y"`
DUMPNAME=Backup-$DATE
DIR=/local_backups
MNT=/tmp/share
HOSTNAME=localhost
REMOTEUSER=host_user
REMOTEPASS='host_user_password'
DOMAIN=domain
SHARE=//HOST/DIR/

printf %20s |tr " " "="; printf '\n'; date +'%d-%m-%Y %H:%M';  printf %20s |tr " " "="; printf '\n';

list="pg_basebackup rsync mount.cifs gzip"

for item in $list
do
    if [ ! -x $(command -v $item) ]; then
        echo "$item not found"
        exit 1
    fi
done

if [ ! -d $MNT ]; then
  mkdir -p $MNT;
fi

function basebackup_wrap () {
    echo "Invoke pg_basebackup"
    pg_basebackup -x -F t -R -z -D $DIR/$DUMPNAME -h $HOSTNAME
}

function rsync_wrap () {
    rsync --remove-source-files --whole-file --checksum --verbose --stats $DIR/$DUMPNAME/base.tar.gz $MNT/base.tar_$DATE.gz
}

basebackup_wrap
gzip -tv $DIR/$DUMPNAME/*.gz

count=1
while [ "$count" -le 5 ]
do
  echo "Try to mount remote directory... attempt $count of 5"
  if mount.cifs $SHARE $MNT -o user=$REMOTEUSER,dom=$DOMAIN,pass=$REMOTEPASS,vers=2.0; then
    rsync_wrap
    if [ $? -ne 0 ]; then
      echo "Failed to copy archive to remote server"
      exit 1
    fi

    rmdir -v $DIR/$DUMPNAME
    umount $MNT
    echo "Done"
    printf '\n'
    exit 0
  else
    ((count++))
    sleep 30
fi
done
echo "Failed to mount remote directory"
exit 1

